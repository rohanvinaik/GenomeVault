"""Implementation of mathematical domains. """

__all__ = [
    'Domain', 'FiniteField', 'IntegerRing', 'RationalField', 'RealField',
    'ComplexField', 'AlgebraicField', 'PolynomialRing', 'FractionField',
    'ExpressionDomain', 'PythonRational',

    'GF', 'FF', 'ZZ', 'QQ', 'ZZ_I', 'QQ_I', 'RR', 'CC', 'EX', 'EXRAW',
]

# This is imported purely for backwards compatibility because some parts of
# the codebase used to import this from here and it's possible that downstream
# does as well:
from sympy.external.gmpy import GROUND_TYPES  # noqa: F401

from .algebraicfield import AlgebraicField
from .complexfield import CC, ComplexField
from .domain import Domain
from .expressiondomain import EX, ExpressionDomain
from .expressionrawdomain import EXRAW
from .finitefield import FF, GF, FiniteField
from .fractionfield import FractionField
from .gaussiandomains import QQ_I, ZZ_I
from .gmpyfinitefield import GMPYFiniteField
from .gmpyintegerring import GMPYIntegerRing
from .gmpyrationalfield import GMPYRationalField
from .integerring import ZZ, IntegerRing
from .polynomialring import PolynomialRing
from .pythonfinitefield import PythonFiniteField
from .pythonintegerring import PythonIntegerRing
from .pythonrational import PythonRational
from .pythonrationalfield import PythonRationalField
from .rationalfield import QQ, RationalField
from .realfield import RR, RealField

#
# The rest of these are obsolete and provided only for backwards
# compatibility:
#


FF_python = PythonFiniteField
FF_gmpy = GMPYFiniteField

ZZ_python = PythonIntegerRing
ZZ_gmpy = GMPYIntegerRing

QQ_python = PythonRationalField
QQ_gmpy = GMPYRationalField

__all__.extend((
    'PythonFiniteField', 'GMPYFiniteField', 'PythonIntegerRing',
    'GMPYIntegerRing', 'PythonRational', 'GMPYRationalField',

    'FF_python', 'FF_gmpy', 'ZZ_python', 'ZZ_gmpy', 'QQ_python', 'QQ_gmpy',
))

