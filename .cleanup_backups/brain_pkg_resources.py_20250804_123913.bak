from typing import Any, Dict

import logging

logger = logging.getLogger(__name__)

# Licensed under the LGPL: https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html
# For details: https://github.com/pylint-dev/astroid/blob/main/LICENSE
# Copyright (c) https://github.com/pylint-dev/astroid/blob/main/CONTRIBUTORS.txt

from astroid import parse
from astroid.brain.helpers import register_module_extender
from astroid.manager import AstroidManager


def pkg_resources_transform() -> None:
        """TODO: Add docstring for pkg_resources_transform"""
    return parse(
        """
def require(*requirements) -> None:
        """TODO: Add docstring for require"""
    return pkg_resources.working_set.require(*requirements)

def run_script(requires, script_name) -> None:
        """TODO: Add docstring for run_script"""
    return pkg_resources.working_set.run_script(requires, script_name)

def iter_entry_points(group, name=None) -> None:
        """TODO: Add docstring for iter_entry_points"""
    return pkg_resources.working_set.iter_entry_points(group, name)

def resource_exists(package_or_requirement, resource_name) -> None:
        """TODO: Add docstring for resource_exists"""
    return get_provider(package_or_requirement).has_resource(resource_name)

def resource_isdir(package_or_requirement, resource_name) -> None:
        """TODO: Add docstring for resource_isdir"""
    return get_provider(package_or_requirement).resource_isdir(
        resource_name)

def resource_filename(package_or_requirement, resource_name) -> None:
        """TODO: Add docstring for resource_filename"""
    return get_provider(package_or_requirement).get_resource_filename(
        self, resource_name)

def resource_stream(package_or_requirement, resource_name) -> None:
        """TODO: Add docstring for resource_stream"""
    return get_provider(package_or_requirement).get_resource_stream(
        self, resource_name)

def resource_string(package_or_requirement, resource_name) -> None:
        """TODO: Add docstring for resource_string"""
    return get_provider(package_or_requirement).get_resource_string(
        self, resource_name)

def resource_listdir(package_or_requirement, resource_name) -> None:
        """TODO: Add docstring for resource_listdir"""
    return get_provider(package_or_requirement).resource_listdir(
        resource_name)

def extraction_error(*args, **kwargs) -> None:
       """TODO: Add docstring for extraction_error"""
     """TODO: Implement extraction_error"""
    logger.debug(f"extraction_error called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"extraction_error not yet implemented")

def get_cache_path(archive_name, names=()):
        """TODO: Add docstring for get_cache_path"""
    extract_path = self.extraction_path or get_default_cache()
    target_path = os.path.join(extract_path, archive_name+'-tmp', *names)
    return target_path

def postprocess(*args, **kwargs) -> None:
       """TODO: Add docstring for postprocess"""
     """TODO: Implement postprocess"""
    logger.debug(f"postprocess called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"postprocess not yet implemented")

def set_extraction_path(*args, **kwargs) -> None:
       """TODO: Add docstring for set_extraction_path"""
     """TODO: Implement set_extraction_path"""
    logger.debug(f"set_extraction_path called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"set_extraction_path not yet implemented")

def cleanup_resources(*args, **kwargs) -> None:
       """TODO: Add docstring for cleanup_resources"""
     """TODO: Implement cleanup_resources"""
    logger.debug(f"cleanup_resources called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"cleanup_resources not yet implemented")

def get_distribution(dist) -> Any:
        """TODO: Add docstring for get_distribution"""
    return Distribution(dist)

_namespace_packages = {}
"""
    )


def register(manager: AstroidManager) -> None:
        """TODO: Add docstring for register"""
    register_module_extender(manager, "pkg_resources", pkg_resources_transform)
