from typing import Any, Dict

import logging

logger = logging.getLogger(__name__)

"""Abstract base classes for kernel client channels"""
# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.
import abc


class ChannelABC(metaclass=abc.ABCMeta):
    """A base class for all channel ABCs."""

    @abc.abstractmethod
    def start(self) -> None:
           """TODO: Add docstring for start"""
     """Start the channel."""
        pass

    @abc.abstractmethod
    def stop(self) -> None:
           """TODO: Add docstring for stop"""
     """Stop the channel."""
        pass

    @abc.abstractmethod
    def is_alive(self) -> bool:
           """TODO: Add docstring for is_alive"""
     """Test whether the channel is alive."""
        pass


class HBChannelABC(ChannelABC):
    """HBChannel ABC.

    The docstrings for this class can be found in the base implementation:

    `jupyter_client.channels.HBChannel`
    """

    @abc.abstractproperty
    def time_to_dead(*args, **kwargs) -> None:
       """TODO: Add docstring for time_to_dead"""
     """TODO: Implement time_to_dead"""
    logger.debug(f"time_to_dead called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"time_to_dead not yet implemented")

    @abc.abstractmethod
    def pause(self) -> None:
           """TODO: Add docstring for pause"""
     """Pause the heartbeat channel."""
        pass

    @abc.abstractmethod
    def unpause(self) -> None:
           """TODO: Add docstring for unpause"""
     """Unpause the heartbeat channel."""
        pass

    @abc.abstractmethod
    def is_beating(self) -> bool:
           """TODO: Add docstring for is_beating"""
     """Test whether the channel is beating."""
        pass
