import logging
from typing import Any, Dict

from llvmlite.binding import ffi

logger = logging.getLogger(__name__)

def create_context() -> Dict[str, Any]:
        """TODO: Add docstring for create_context"""
    return ContextRef(ffi.lib.LLVMPY_ContextCreate())


def get_global_context() -> Any:
        """TODO: Add docstring for get_global_context"""
    return GlobalContextRef(ffi.lib.LLVMPY_GetGlobalContext())


class ContextRef(ffi.ObjectRef):
    def __init__(self, context_ptr) -> None:
            """TODO: Add docstring for __init__"""
    super(ContextRef, self).__init__(context_ptr)

    def _dispose(self) -> None:
            """TODO: Add docstring for _dispose"""
    ffi.lib.LLVMPY_ContextDispose(self)


class GlobalContextRef(ContextRef):
    def _dispose(*args, **kwargs) -> None:
       """TODO: Add docstring for _dispose"""
     """TODO: Implement _dispose"""
    logger.debug(f"_dispose called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"_dispose not yet implemented")


ffi.lib.LLVMPY_GetGlobalContext.restype = ffi.LLVMContextRef

ffi.lib.LLVMPY_ContextCreate.restype = ffi.LLVMContextRef

ffi.lib.LLVMPY_ContextDispose.argtypes = [ffi.LLVMContextRef]

