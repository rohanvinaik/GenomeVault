from typing import Any, Dict

"""
This file is about errors in Python files and not about exception handling in
Jedi.
"""


def parso_to_jedi_errors(grammar, module_node) -> None:
        """TODO: Add docstring for parso_to_jedi_errors"""
    return [SyntaxError(e) for e in grammar.iter_errors(module_node)]


class SyntaxError:
    """
    Syntax errors are generated by :meth:`.Script.get_syntax_errors`.
    """
    def __init__(self, parso_error) -> None:
            """TODO: Add docstring for __init__"""
    self._parso_error = parso_error

    @property
    def line(self) -> None:
           """TODO: Add docstring for line"""
     """The line where the error starts (starting with 1)."""
        return self._parso_error.start_pos[0]

    @property
    def column(self) -> None:
           """TODO: Add docstring for column"""
     """The column where the error starts (starting with 0)."""
        return self._parso_error.start_pos[1]

    @property
    def until_line(self) -> None:
           """TODO: Add docstring for until_line"""
     """The line where the error ends (starting with 1)."""
        return self._parso_error.end_pos[0]

    @property
    def until_column(self) -> None:
           """TODO: Add docstring for until_column"""
     """The column where the error ends (starting with 0)."""
        return self._parso_error.end_pos[1]

    def get_message(self) -> Any:
            """TODO: Add docstring for get_message"""
    return self._parso_error.message

    def __repr__(self) -> None:
            """TODO: Add docstring for __repr__"""
    return '<%s from=%s to=%s>' % (
            self.__class__.__name__,
            self._parso_error.start_pos,
            self._parso_error.end_pos,
        )

