#!/usr/bin/env python3
"""
Targeted fix for GenomeVault ZK Prover module
"""

import re
from pathlib import Path


def fix_prover_file():
    """Fix the specific issues in the prover.py file."""
    repo_root = Path("/Users/rohanvinaik/genomevault")
    prover_path = repo_root / "genomevault/zk_proofs/prover.py"
    
    if not prover_path.exists():
        print(f"File not found: {prover_path}")
        return
    
    content = prover_path.read_text()
    
    # Define the fixes needed
    fixes = [
        # Add missing imports and constants at the top
        (
            'from genomevault.utils.logging import get_logger\n\nlogger = get_logger(__name__)',
            '''from genomevault.utils.logging import get_logger
from genomevault.observability.logging import configure_logging

# Configure logging
audit_logger = configure_logging()
logger = get_logger(__name__)'''
        ),
        
        # Fix undefined variables by adding assignments before use
        ('_ = self._get_circuit(circuit_name)', 'circuit = self._get_circuit(circuit_name)'),
        ('_ = self._generate_proof_id(circuit_name, public_inputs)', 'proof_id = self._generate_proof_id(circuit_name, public_inputs)'),
        ('_ = time.time()', 'start_time = time.time()'),
        ('_ = self._simulate_proof_generation(circuit, public_inputs, private_inputs)', 'proof_data = self._simulate_proof_generation(circuit, public_inputs, private_inputs)'),
        ('_ = time.time() - start_time', 'generation_time = time.time() - start_time'),
        
        # Fix function body issues
        ('_ = {', 'circuit_map = {'),
        ('_ = private_inputs["variant_data"]', 'variant_data = private_inputs["variant_data"]'),
        ('_ = "{variant_data[\'chr\']}:{variant_data[\'pos\']}:{variant_data[\'re\']}:{variant_data[\'alt\']}"', 'variant_str = f"{variant_data[\'chr\']}:{variant_data[\'pos\']}:{variant_data[\'ref\']}:{variant_data[\'alt\']}"'),
        ('_ = hashlib.sha256(variant_str.encode()).hexdigest()', 'variant_hash = hashlib.sha256(variant_str.encode()).hexdigest()'),
        
        # Fix more undefined variables
        ('_ = private_inputs["variants"]', 'variants = private_inputs["variants"]'),
        ('_ = private_inputs["weights"]', 'weights = private_inputs["weights"]'),
        ('_ = sum(v * w for v, w in zip(variants, weights))', 'score = sum(v * w for v, w in zip(variants, weights))'),
        
        # Fix diabetes proof variables
        ('_ = private_inputs["glucose_reading"]', 'g = private_inputs["glucose_reading"]'),
        ('_ = public_inputs["glucose_threshold"]', 'g_threshold = public_inputs["glucose_threshold"]'),
        ('_ = public_inputs["risk_threshold"]', 'r_threshold = public_inputs["risk_threshold"]'),
        ('_ = (g > g_threshold) and (r > r_threshold)', 'condition = (g > g_threshold) and (r > r_threshold)'),
        
        # Fix other variables
        ('_ = min(800, 192 + circuit.constraints // 100)', 'proof_size = min(800, 192 + circuit.constraints // 100)'),
        ('_ = {', 'proof_data = {'),
        ('_ = []', 'proofs = []'),
        ('_ = self.generate_proof(', 'proof = self.generate_proof('),
        ('_ = {', 'public_inputs = {'),
        ('_ = {', 'private_inputs = {'),
        ('_ = self.generate_proof(', 'recursive_proof = self.generate_proof('),
        ('_ = json.dumps(', 'proof_str = json.dumps('),
        
        # Fix example code
        ('_ = Prover()', 'prover = Prover()'),
        ('_ = prover.generate_proof(', 'variant_proof = prover.generate_proof('),
        ('_ = prover.generate_proof(', 'diabetes_proof = prover.generate_proof('),
        
        # Fix print statements with proper f-strings
        ('print("Variant proof generated: {variant_proof.proof_id}")', 'print(f"Variant proof generated: {variant_proof.proof_id}")'),
        ('print("Proof size: {len(variant_proof.proof_data)} bytes")', 'print(f"Proof size: {len(variant_proof.proof_data)} bytes")'),
        ('print("\\nDiabetes risk proof generated: {diabetes_proof.proof_id}")', 'print(f"\\nDiabetes risk proof generated: {diabetes_proof.proof_id}")'),
        ('print("Proof size: {len(diabetes_proof.proof_data)} bytes")', 'print(f"Proof size: {len(diabetes_proof.proof_data)} bytes")'),
        ('print(\n        "Verification time: {diabetes_proof.metadata[\'generation_time_seconds\']*1000:.1f}ms"\n    )', 'print(f"Verification time: {diabetes_proof.metadata[\'generation_time_seconds\']*1000:.1f}ms")'),
        
        # Fix string formatting issues
        ('raise ValueError("Unknown circuit: {circuit_name}")', 'raise ValueError(f"Unknown circuit: {circuit_name}")'),
        ('raise ValueError("Missing public input: {required_input}")', 'raise ValueError(f"Missing public input: {required_input}")'),
        ('raise ValueError("Missing private input: {required_input}")', 'raise ValueError(f"Missing private input: {required_input}")'),
        ('raise ValueError("Invalid proof: {proof.proof_id}")', 'raise ValueError(f"Invalid proof: {proof.proof_id}")'),
        ('logger.error("Batch proof generation failed: e")', 'logger.error(f"Batch proof generation failed: {e}")'),
        ('logger.info("Proof generated for circuit_name", extra={"privacy_safe": True})', 'logger.info(f"Proof generated for {circuit_name}", extra={"privacy_safe": True})'),
        
        # Fix problematic string literals  
        ('action="generate_{circuit_name}_proof"', 'action=f"generate_{circuit_name}_proof"'),
        ('b"{condition}:{private_inputs[\'witness_randomness\']}"', 'f"{condition}:{private_inputs[\'witness_randomness\']}".encode()'),
        
        # Fix typo in variable name
        ('"merkle_proo": ["hash1", "hash2", "hash3"]', '"merkle_proof": ["hash1", "hash2", "hash3"]'),
        ("'re': \"A\"", "'ref': \"A\""),
    ]
    
    # Apply fixes
    for old, new in fixes:
        content = content.replace(old, new)
    
    # Write back the fixed content
    prover_path.write_text(content)
    print("Fixed prover.py")

if __name__ == "__main__":
    fix_prover_file()

