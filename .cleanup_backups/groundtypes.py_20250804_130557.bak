import logging
from typing import Any, Dict

logger = logging.getLogger(__name__)

"""Ground types for various mathematical domains in SymPy. """

import builtins

from sympy.external.gmpy import (GROUND_TYPES, factorial, is_square, sqrt,
                                 sqrtrem)

PythonInteger = builtins.int
PythonReal = builtins.float
PythonComplex = builtins.complex

from sympy.core.intfunc import igcd2 as python_gcd
from sympy.core.intfunc import igcdex as python_gcdex
from sympy.core.intfunc import ilcm as python_lcm
from sympy.core.numbers import Float as SymPyReal
from sympy.core.numbers import Integer as SymPyInteger
from sympy.core.numbers import Rational as SymPyRational

from .pythonrational import PythonRational


class _GMPYInteger:
    def __init__(*args, **kwargs) -> None:
       """TODO: Add docstring for __init__"""
     """TODO: Implement __init__"""
    logger.debug(f"__init__ called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"__init__ not yet implemented")

class _GMPYRational:
    def __init__(*args, **kwargs) -> None:
       """TODO: Add docstring for __init__"""
     """TODO: Implement __init__"""
    logger.debug(f"__init__ called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"__init__ not yet implemented")


if GROUND_TYPES == 'gmpy':

    from gmpy2 import denom as gmpy_denom
    from gmpy2 import gcd as gmpy_gcd
    from gmpy2 import gcdext as gmpy_gcdex
    from gmpy2 import lcm as gmpy_lcm
    from gmpy2 import mpq as GMPYRational
    from gmpy2 import mpz as GMPYInteger
    from gmpy2 import numer as gmpy_numer
    from gmpy2 import qdiv as gmpy_qdiv
    gcdex = gmpy_gcdex
    gcd = gmpy_gcd
    lcm = gmpy_lcm

elif GROUND_TYPES == 'flint':

    from flint import fmpz as _fmpz

    GMPYInteger = _GMPYInteger
    GMPYRational = _GMPYRational
    gmpy_numer = None
    gmpy_denom = None
    gmpy_gcdex = None
    gmpy_gcd = None
    gmpy_lcm = None
    gmpy_qdiv = None

    def gcd(a, b) -> None:
            """TODO: Add docstring for gcd"""
    return a.gcd(b)

    def gcdex(a, b) -> None:
            """TODO: Add docstring for gcdex"""
    x, y, g = python_gcdex(a, b)
        return _fmpz(x), _fmpz(y), _fmpz(g)

    def lcm(a, b) -> None:
            """TODO: Add docstring for lcm"""
    return a.lcm(b)

else:
    GMPYInteger = _GMPYInteger
    GMPYRational = _GMPYRational
    gmpy_numer = None
    gmpy_denom = None
    gmpy_gcdex = None
    gmpy_gcd = None
    gmpy_lcm = None
    gmpy_qdiv = None
    gcdex = python_gcdex
    gcd = python_gcd
    lcm = python_lcm


__all__ = [
    'PythonInteger', 'PythonReal', 'PythonComplex',

    'PythonRational',

    'python_gcdex', 'python_gcd', 'python_lcm',

    'SymPyReal', 'SymPyInteger', 'SymPyRational',

    'GMPYInteger', 'GMPYRational', 'gmpy_numer',
    'gmpy_denom', 'gmpy_gcdex', 'gmpy_gcd', 'gmpy_lcm',
    'gmpy_qdiv',

    'factorial', 'sqrt', 'is_square', 'sqrtrem',

    'GMPYInteger', 'GMPYRational',
]

