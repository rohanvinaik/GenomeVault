import logging
from abc import ABC, abstractmethod
from typing import Any, Dict

logger = logging.getLogger(__name__)

class _Methods(ABC):
    """Abstract Base Class for all methods."""

    @abstractmethod
    def q(*args, **kwargs) -> None:
       """TODO: Add docstring for q"""
     """TODO: Implement q"""
    logger.debug(f"q called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"q not yet implemented")

    @abstractmethod
    def u(*args, **kwargs) -> None:
       """TODO: Add docstring for u"""
     """TODO: Implement u"""
    logger.debug(f"u called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"u not yet implemented")

    @abstractmethod
    def bodies(*args, **kwargs) -> None:
       """TODO: Add docstring for bodies"""
     """TODO: Implement bodies"""
    logger.debug(f"bodies called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"bodies not yet implemented")

    @abstractmethod
    def loads(*args, **kwargs) -> None:
       """TODO: Add docstring for loads"""
     """TODO: Implement loads"""
    logger.debug(f"loads called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"loads not yet implemented")

    @abstractmethod
    def mass_matrix(*args, **kwargs) -> None:
       """TODO: Add docstring for mass_matrix"""
     """TODO: Implement mass_matrix"""
    logger.debug(f"mass_matrix called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"mass_matrix not yet implemented")

    @abstractmethod
    def forcing(*args, **kwargs) -> None:
       """TODO: Add docstring for forcing"""
     """TODO: Implement forcing"""
    logger.debug(f"forcing called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"forcing not yet implemented")

    @abstractmethod
    def mass_matrix_full(*args, **kwargs) -> None:
       """TODO: Add docstring for mass_matrix_full"""
     """TODO: Implement mass_matrix_full"""
    logger.debug(f"mass_matrix_full called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"mass_matrix_full not yet implemented")

    @abstractmethod
    def forcing_full(*args, **kwargs) -> None:
       """TODO: Add docstring for forcing_full"""
     """TODO: Implement forcing_full"""
    logger.debug(f"forcing_full called with args={args}, kwargs={kwargs}")
    raise NotImplementedError(f"forcing_full not yet implemented")

    def _form_eoms(self) -> None:
            """TODO: Add docstring for _form_eoms"""
    raise NotImplementedError("Subclasses must implement this.")

