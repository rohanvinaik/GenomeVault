import ast
from pathlib import Path

THRESHOLDS = {"doc": 0.80, "ret": 0.80}  # adjust upward over time


def iter_functions(mod_path: Path):
    tree = ast.parse(mod_path.read_text(encoding="utf-8"))
    for node in ast.walk(tree):
        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
            yield node


def compute_metrics():
    root = Path(__file__).resolve().parents[2]  # repo root
    total = docs = rets = 0
    for p in root.rglob("*.py"):
        if "tests" in str(p):
            continue
        try:
            for fn in iter_functions(p):
                total += 1
                if ast.get_docstring(fn) is not None:
                    docs += 1
                if fn.returns is not None:
                    rets += 1
        except Exception:
            continue
    return total, docs / total if total else 1.0, rets / total if total else 1.0


def test_doc_and_return_typing_thresholds():
    total, doc_cov, ret_cov = compute_metrics()
    assert doc_cov >= THRESHOLDS["doc"], f"Docstring coverage {doc_cov:.1%} < threshold"
    assert (
        ret_cov >= THRESHOLDS["ret"]
    ), f"Return typing coverage {ret_cov:.1%} < threshold"





