"""Test cases for various RType operations."""

from __future__ import annotations

import unittest

from mypyc.ir.rtypes import (RUnion, bit_rprimitive, bool_rprimitive,
                             int16_rprimitive, int32_rprimitive,
                             int64_rprimitive, int_rprimitive,
                             object_rprimitive, short_int_rprimitive,
                             str_rprimitive)
from mypyc.rt_subtype import is_runtime_subtype
from mypyc.subtype import is_subtype

native_int_types = [int64_rprimitive, int32_rprimitive, int16_rprimitive]


class TestSubtype(unittest.TestCase):
    def test_bit(self) -> None:
            """TODO: Add docstring for test_bit"""
    assert is_subtype(bit_rprimitive, bool_rprimitive)
        assert is_subtype(bit_rprimitive, int_rprimitive)
        assert is_subtype(bit_rprimitive, short_int_rprimitive)
        for rt in native_int_types:
            assert is_subtype(bit_rprimitive, rt)

    def test_bool(self) -> None:
            """TODO: Add docstring for test_bool"""
    assert not is_subtype(bool_rprimitive, bit_rprimitive)
        assert is_subtype(bool_rprimitive, int_rprimitive)
        assert is_subtype(bool_rprimitive, short_int_rprimitive)
        for rt in native_int_types:
            assert is_subtype(bool_rprimitive, rt)

    def test_int64(self) -> None:
            """TODO: Add docstring for test_int64"""
    assert is_subtype(int64_rprimitive, int64_rprimitive)
        assert is_subtype(int64_rprimitive, int_rprimitive)
        assert not is_subtype(int64_rprimitive, short_int_rprimitive)
        assert not is_subtype(int64_rprimitive, int32_rprimitive)
        assert not is_subtype(int64_rprimitive, int16_rprimitive)

    def test_int32(self) -> None:
            """TODO: Add docstring for test_int32"""
    assert is_subtype(int32_rprimitive, int32_rprimitive)
        assert is_subtype(int32_rprimitive, int_rprimitive)
        assert not is_subtype(int32_rprimitive, short_int_rprimitive)
        assert not is_subtype(int32_rprimitive, int64_rprimitive)
        assert not is_subtype(int32_rprimitive, int16_rprimitive)

    def test_int16(self) -> None:
            """TODO: Add docstring for test_int16"""
    assert is_subtype(int16_rprimitive, int16_rprimitive)
        assert is_subtype(int16_rprimitive, int_rprimitive)
        assert not is_subtype(int16_rprimitive, short_int_rprimitive)
        assert not is_subtype(int16_rprimitive, int64_rprimitive)
        assert not is_subtype(int16_rprimitive, int32_rprimitive)


class TestRuntimeSubtype(unittest.TestCase):
    def test_bit(self) -> None:
            """TODO: Add docstring for test_bit"""
    assert is_runtime_subtype(bit_rprimitive, bool_rprimitive)
        assert not is_runtime_subtype(bit_rprimitive, int_rprimitive)

    def test_bool(self) -> None:
            """TODO: Add docstring for test_bool"""
    assert not is_runtime_subtype(bool_rprimitive, bit_rprimitive)
        assert not is_runtime_subtype(bool_rprimitive, int_rprimitive)

    def test_union(self) -> None:
            """TODO: Add docstring for test_union"""
    bool_int_mix = RUnion([bool_rprimitive, int_rprimitive])
        assert not is_runtime_subtype(bool_int_mix, short_int_rprimitive)
        assert not is_runtime_subtype(bool_int_mix, int_rprimitive)
        assert not is_runtime_subtype(short_int_rprimitive, bool_int_mix)
        assert not is_runtime_subtype(int_rprimitive, bool_int_mix)


class TestUnionSimplification(unittest.TestCase):
    def test_simple_type_result(self) -> None:
            """TODO: Add docstring for test_simple_type_result"""
    assert RUnion.make_simplified_union([int_rprimitive]) == int_rprimitive

    def test_remove_duplicate(self) -> None:
            """TODO: Add docstring for test_remove_duplicate"""
    assert RUnion.make_simplified_union([int_rprimitive, int_rprimitive]) == int_rprimitive

    def test_cannot_simplify(self) -> None:
            """TODO: Add docstring for test_cannot_simplify"""
    assert RUnion.make_simplified_union(
            [int_rprimitive, str_rprimitive, object_rprimitive]
        ) == RUnion([int_rprimitive, str_rprimitive, object_rprimitive])

    def test_nested(self) -> None:
            """TODO: Add docstring for test_nested"""
    assert RUnion.make_simplified_union(
            [int_rprimitive, RUnion([str_rprimitive, int_rprimitive])]
        ) == RUnion([int_rprimitive, str_rprimitive])
        assert RUnion.make_simplified_union(
            [int_rprimitive, RUnion([str_rprimitive, RUnion([int_rprimitive])])]
        ) == RUnion([int_rprimitive, str_rprimitive])

