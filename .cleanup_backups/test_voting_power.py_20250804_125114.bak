"""Voting power parity tests"""

import itertools

import pytest


def test_nodeinfo_and_blockchainnode_agree():
    """Test that NodeInfo and BlockchainNode calculate voting power consistently"""
    try:
        from genomevault.blockchain.node import BlockchainNode, NodeInfo
        from genomevault.core.constants import NODE_CLASS_WEIGHT, NodeType

        def reference_vp(node_type, signatory):
            return NODE_CLASS_WEIGHT[node_type] + (2 if signatory else 0)

        for nt, signatory in itertools.product(list(NodeType), [False, True]):
            bn = BlockchainNode("n1", nt, signatory)
            ni = NodeInfo(
                node_id="n2",
                node_type=nt.value,
                class_weight=NODE_CLASS_WEIGHT[nt],
                signatory=signatory,
            )
            assert bn._calculate_voting_power(nt, signatory) == reference_vp(
                nt, signatory
            )
            assert ni.calculate_voting_power() == reference_vp(nt, signatory)
    except ImportError:
        pytest.skip("Blockchain module not available")


