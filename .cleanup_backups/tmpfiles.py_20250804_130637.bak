from typing import Any, Dict

"""
This module adds context manager for temporary files generated by the tests.
"""

import os
import shutil


class TmpFileManager:
    """
    A class to track record of every temporary files created by the tests.
    """
    tmp_files = set('')
    tmp_folders = set('')

    @classmethod
    def tmp_file(cls, name='') -> None:
            """TODO: Add docstring for tmp_file"""
    cls.tmp_files.add(name)
        return name

    @classmethod
    def tmp_folder(cls, name='') -> None:
            """TODO: Add docstring for tmp_folder"""
    cls.tmp_folders.add(name)
        return name

    @classmethod
    def cleanup(cls) -> None:
            """TODO: Add docstring for cleanup"""
    while cls.tmp_files:
            file = cls.tmp_files.pop()
            if os.path.isfile(file):
                os.remove(file)
        while cls.tmp_folders:
            folder = cls.tmp_folders.pop()
            shutil.rmtree(folder)

def cleanup_tmp_files(test_func) -> None:
       """TODO: Add docstring for cleanup_tmp_files"""
     """
    A decorator to help test codes remove temporary files after the tests.
    """
    def wrapper_function() -> None:
            """TODO: Add docstring for wrapper_function"""
    try:
            test_func()
        finally:
            TmpFileManager.cleanup()

    return wrapper_function

