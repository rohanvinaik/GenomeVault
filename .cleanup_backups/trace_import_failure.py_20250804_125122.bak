#!/usr/bin/env python3
"""
Trace the exact import failure point
"""

import traceback

logger.info("=" * 70)
logger.info("TRACING IMPORT FAILURE")
logger.info("=" * 70)

# First, let's see if we can import our __init__ files
logger.info("\n1. Testing __init__.py imports...")

try:
    logger.info("✅ zk_proofs/__init__.py imported")
except Exception:
    from genomevault.observability.logging import configure_logging

    logger = configure_logging()
    logger.exception("Unhandled exception")
    logger.info("❌ zk_proofs/__init__.py failed: {e}")
    traceback.print_exc()
    logger.info("\nThis is likely where cryptography is first imported")
    raise

# Let's check what's in the zk_proofs __init__.py
logger.info("\n2. Checking zk_proofs/__init__.py content...")
try:
    with open("zk_proofs/__init__.py") as f:
        content = f.read()
        if "cryptography" in content:
            logger.info("❌ Found 'cryptography' import in zk_proofs/__init__.py")
        else:
            logger.info("✅ No direct 'cryptography' import in zk_proofs/__init__.py")
            logger.info("   Import chain must be indirect...")
except Exception:
    from genomevault.observability.logging import configure_logging

    logger = configure_logging()
    logger.exception("Unhandled exception")
    logger.info("Could not read file: {e}")
    raise

# Let's check the utils module since that's likely imported
logger.info("\n3. Testing utils imports...")
try:
    logger.info("✅ utils/__init__.py imported")
except Exception:
    from genomevault.observability.logging import configure_logging

    logger = configure_logging()
    logger.exception("Unhandled exception")
    logger.info("❌ utils/__init__.py failed: {e}")
    raise

# Check core module
logger.info("\n4. Testing core imports...")
try:
    logger.info("✅ core/__init__.py imported")
except Exception:
    from genomevault.observability.logging import configure_logging

    logger = configure_logging()
    logger.exception("Unhandled exception")
    logger.info("❌ core/__init__.py failed: {e}")
    raise

logger.info("\n5. Looking for the cryptography import...")
import logging
import os

logger = logging.getLogger(__name__)


def find_cryptography_imports(directory):
    """Find all files that import cryptography"""
    files_with_crypto = []
    for root, dirs, files in os.walk(directory):
        # Skip __pycache__
        if "__pycache__" in root:
            continue
        for file in files:
            if file.endswith(".py"):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath) as f:
                        content = f.read()
                        if (
                            "from cryptography" in content
                            or "import cryptography" in content
                        ):
                            files_with_crypto.append(filepath)
                except Exception:
                    from genomevault.observability.logging import \
                        configure_logging

                    logger = configure_logging()
                    logger.exception("Unhandled exception")
                    pass
                    raise
    return files_with_crypto


crypto_files = find_cryptography_imports(".")
logger.info("\nFiles importing cryptography:")
for f in crypto_files[:10]:  # Show first 10
    logger.info("  - {f}")

logger.info("\n" + "=" * 70)


