# .github/workflows/ci.yml
name: GenomeVault CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  
env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.4.0'

jobs:
  lint:
    name: Linting & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Run Black
      run: poetry run black --check .
    
    - name: Run isort
      run: poetry run isort --check-only .
    
    - name: Run Flake8
      run: poetry run flake8 .
    
    - name: Run Pylint
      run: poetry run pylint genomevault --fail-under=8.0

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run mypy
      run: poetry run mypy genomevault --ignore-missing-imports

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run pytest with coverage
      run: |
        poetry run pytest tests/ \
          --cov=genomevault \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=test-results.xml \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run Bandit security scan
      run: poetry run bandit -r genomevault -f json -o bandit-report.json
    
    - name: Run Safety check
      run: poetry run safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/django

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: genomevault_test
          POSTGRES_DB: genomevault_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:genomevault_test@localhost:5432/genomevault_test
      run: |
        poetry run pytest tests/integration/ \
          --cov=genomevault \
          --cov-append \
          -v

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Build package
      run: poetry build
    
    - name: Build Docker image
      run: |
        docker build -t genomevault:${{ github.sha }} .
        docker tag genomevault:${{ github.sha }} genomevault:latest
    
    - name: Save Docker image
      run: docker save genomevault:latest -o genomevault.tar
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          genomevault.tar

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Load Docker image
      run: docker load -i genomevault.tar
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 10
    
    - name: Health check
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/v1/status || exit 1
    
    - name: Basic API test
      run: |
        # Test topology endpoint
        curl -X POST http://localhost:8000/api/v1/topology \
          -H "Content-Type: application/json" \
          -d '{}' | jq .
    
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  generate-badges:
    name: Generate Status Badges
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: test-results-3.10
    
    - name: Generate coverage badge
      uses: 5monkeys/cobertura-action@master
      with:
        path: coverage.xml
        minimum_coverage: 75
    
    - name: Update README badges
      run: |
        echo "![CI Status](https://github.com/${{ github.repository }}/workflows/GenomeVault%20CI/badge.svg)" >> badges.md
        echo "![Coverage](https://codecov.io/gh/${{ github.repository }}/branch/main/graph/badge.svg)" >> badges.md
    
    - name: Commit badges
      uses: EndBug/add-and-commit@v9
      with:
        add: 'badges.md'
        message: 'Update CI badges [skip ci]'
