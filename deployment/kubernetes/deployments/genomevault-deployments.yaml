apiVersion: apps/v1
kind: Deployment
metadata:
  name: genomevault-api
  namespace: genomevault
  labels:
    app: genomevault
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: genomevault
      component: api
  template:
    metadata:
      labels:
        app: genomevault
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: genomevault-api
      
      initContainers:
      - name: wait-for-blockchain
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z genomevault-blockchain 26657; do echo waiting for blockchain; sleep 2; done;']
        
      containers:
      - name: api
        image: genomevault/api:3.0.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
          
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: genomevault-secrets
              key: encryption-key
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: genomevault-secrets
              key: database-url
              
        envFrom:
        - configMapRef:
            name: genomevault-config
            
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: cache
          mountPath: /cache
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
          
      volumes:
      - name: config
        configMap:
          name: genomevault-config
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: tls-certs
        secret:
          secretName: genomevault-tls
          
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - genomevault
                - key: component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
              
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: genomevault-blockchain
  namespace: genomevault
  labels:
    app: genomevault
    component: blockchain
spec:
  serviceName: genomevault-blockchain
  replicas: 3
  selector:
    matchLabels:
      app: genomevault
      component: blockchain
  template:
    metadata:
      labels:
        app: genomevault
        component: blockchain
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "26660"
    spec:
      serviceAccountName: genomevault-blockchain
      
      initContainers:
      - name: init-blockchain
        image: genomevault/blockchain:3.0.0
        command: ['/scripts/init-node.sh']
        volumeMounts:
        - name: blockchain-data
          mountPath: /data/genomevault/blockchain
        - name: scripts
          mountPath: /scripts
          
      containers:
      - name: blockchain
        image: genomevault/blockchain:3.0.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: p2p
          containerPort: 26656
          protocol: TCP
        - name: rpc
          containerPort: 26657
          protocol: TCP
        - name: prometheus
          containerPort: 26660
          protocol: TCP
          
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_CLASS
          value: "full"  # Can be light, full, or archive
        - name: SIGNATORY_STATUS
          value: "trusted"  # Can be non-signer or trusted
        - name: VALIDATOR_KEY
          valueFrom:
            secretKeyRef:
              name: genomevault-validator-keys
              key: $(NODE_ID)
              optional: true
              
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            
        livenessProbe:
          httpGet:
            path: /health
            port: rpc
          initialDelaySeconds: 60
          periodSeconds: 10
          
        volumeMounts:
        - name: blockchain-data
          mountPath: /data/genomevault/blockchain
        - name: config
          mountPath: /config
          readOnly: true
        - name: scripts
          mountPath: /scripts
          readOnly: true
          
      volumes:
      - name: config
        configMap:
          name: genomevault-config
      - name: scripts
        configMap:
          name: genomevault-scripts
          defaultMode: 0755
          
  volumeClaimTemplates:
  - metadata:
      name: blockchain-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
          
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: genomevault-pir-server
  namespace: genomevault
  labels:
    app: genomevault
    component: pir-server
spec:
  serviceName: genomevault-pir-server
  replicas: 5  # N-server PIR configuration
  selector:
    matchLabels:
      app: genomevault
      component: pir-server
  template:
    metadata:
      labels:
        app: genomevault
        component: pir-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: genomevault-pir
      
      containers:
      - name: pir-server
        image: genomevault/pir-server:3.0.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: pir
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
          
        env:
        - name: SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PIR_NODE_TYPE
          value: "server"
        - name: SHARD_COUNT
          value: "3"
        - name: SERVER_TYPE
          value: "hipaa-ts"  # hipaa-ts or generic
        - name: HONESTY_PROBABILITY
          value: "0.98"
          
        resources:
          requests:
            memory: "8Gi"
            cpu: "4000m"
          limits:
            memory: "16Gi"
            cpu: "8000m"
            
        volumeMounts:
        - name: pir-data
          mountPath: /data/genomevault/pir
        - name: reference-data
          mountPath: /data/reference
          readOnly: true
          
  volumeClaimTemplates:
  - metadata:
      name: pir-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 500Gi
          
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: genomevault-monitoring
  namespace: genomevault
  labels:
    app: genomevault
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: genomevault
      component: monitoring
  template:
    metadata:
      labels:
        app: genomevault
        component: monitoring
    spec:
      serviceAccountName: genomevault-monitoring
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
        - '--web.enable-lifecycle'
        
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
          
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
          
      - name: grafana
        image: grafana/grafana:9.3.0
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
          
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: genomevault-monitoring-secrets
              key: grafana-admin-password
              
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-data
          mountPath: /var/lib/grafana
          
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data
