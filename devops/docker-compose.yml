version: '3.8'

services:
  # GenomeVault API Service
  genomevault-api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    image: genomevault/api:3.0.0
    container_name: genomevault-api
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://genomevault:${DB_PASSWORD}@postgres:5432/genomevault
      - REDIS_URL=redis://redis:6379
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      - postgres
      - redis
      - blockchain-node
    volumes:
      - ./config:/config:ro
      - api-cache:/cache
    networks:
      - genomevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockchain Node
  blockchain-node:
    build:
      context: .
      dockerfile: docker/blockchain/Dockerfile
    image: genomevault/blockchain:3.0.0
    container_name: genomevault-blockchain
    ports:
      - "26656:26656"  # P2P
      - "26657:26657"  # RPC
      - "26660:26660"  # Prometheus
    environment:
      - NODE_CLASS=full
      - SIGNATORY_STATUS=trusted
      - CHAIN_ID=genomevault-mainnet
    volumes:
      - blockchain-data:/data/blockchain
      - ./config/genesis.json:/config/genesis.json:ro
    networks:
      - genomevault-network
    restart: unless-stopped

  # PIR Server (multiple instances)
  pir-server-1:
    build:
      context: .
      dockerfile: docker/pir/Dockerfile
    image: genomevault/pir-server:3.0.0
    container_name: genomevault-pir-1
    ports:
      - "8081:8080"
    environment:
      - SERVER_ID=pir-1
      - SERVER_TYPE=hipaa-ts
      - SHARD_INDEX=0
      - TOTAL_SHARDS=3
    volumes:
      - pir-data-1:/data/pir
      - reference-data:/data/reference:ro
    networks:
      - genomevault-network
    restart: unless-stopped

  pir-server-2:
    build:
      context: .
      dockerfile: docker/pir/Dockerfile
    image: genomevault/pir-server:3.0.0
    container_name: genomevault-pir-2
    ports:
      - "8082:8080"
    environment:
      - SERVER_ID=pir-2
      - SERVER_TYPE=hipaa-ts
      - SHARD_INDEX=1
      - TOTAL_SHARDS=3
    volumes:
      - pir-data-2:/data/pir
      - reference-data:/data/reference:ro
    networks:
      - genomevault-network
    restart: unless-stopped

  pir-server-3:
    build:
      context: .
      dockerfile: docker/pir/Dockerfile
    image: genomevault/pir-server:3.0.0
    container_name: genomevault-pir-3
    ports:
      - "8083:8080"
    environment:
      - SERVER_ID=pir-3
      - SERVER_TYPE=generic
      - SHARD_INDEX=2
      - TOTAL_SHARDS=3
    volumes:
      - pir-data-3:/data/pir
      - reference-data:/data/reference:ro
    networks:
      - genomevault-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: genomevault-postgres
    environment:
      - POSTGRES_DB=genomevault
      - POSTGRES_USER=genomevault
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - genomevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U genomevault"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: genomevault-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - genomevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: genomevault-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./deployment/monitoring/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    networks:
      - genomevault-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:9.3.0
    container_name: genomevault-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./deployment/monitoring/grafana:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    networks:
      - genomevault-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: genomevault-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - genomevault-network
    depends_on:
      - genomevault-api
    restart: unless-stopped

# Networks
networks:
  genomevault-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  blockchain-data:
    driver: local
  pir-data-1:
    driver: local
  pir-data-2:
    driver: local
  pir-data-3:
    driver: local
  reference-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  api-cache:
    driver: local
  nginx-cache:
    driver: local
